(function (i, g) {
    var o = i.document;
    var a = "classList" in o.createElement("div");

    function s(u) {
        return new RegExp("(^|\\s+)" + u + "(\\s+|$)")
    }

    var b = a ? function (u, v) {
        return u.classList.contains(v)
    } : function (u, v) {
        return s(v).test(u.className)
    };
    var k = a ? function (u, v) {
        u.classList.add(v)
    } : function (u, v) {
        if (!b(u, v)) {
            u.className = u.className + " " + v
        }
    };
    var m = a ? function (u, v) {
        u.classList.remove(v)
    } : function (u, v) {
        u.className = u.className.replace(s(v), " ")
    };
    var c = o.defaultView;
    var e = c && c.getComputedStyle ? function (u) {
        return c.getComputedStyle(u, null)
    } : function (u) {
        return u.currentStyle
    };
    var j = o.getElementsByTagName("body")[0], n = o.createElement("div"), h = j || o.createElement("body");
    n.style.marginTop = "1%";
    h.appendChild(n);
    var t = e(n).marginTop !== "1%";
    h.removeChild(n);
    function d(x, v, z) {
        if (z.indexOf("%") === -1) {
            return z
        }
        var u = x.style, y = u.width, w;
        u.width = z;
        w = v.width;
        u.width = y;
        return w
    }

    function r(A, v, J) {
        var u = v !== "height", y = u ? A.offsetWidth : A.offsetHeight, B = u ? "Left" : "Top", z = u ? "Right" : "Bottom", E = e(A), D = parseFloat(E["padding" + B]) || 0, C = parseFloat(E["padding" + z]) || 0, H = parseFloat(E["border" + B + "Width"]) || 0, F = parseFloat(E["border" + z + "Width"]) || 0, x = E["margin" + B], w = E["margin" + z], I, G;
        if (!t) {
            x = d(A, E, x);
            w = d(A, E, w)
        }
        I = parseFloat(x) || 0;
        G = parseFloat(w) || 0;
        if (y > 0) {
            if (J) {
                y += I + G
            } else {
                y -= D + C + H + F
            }
        } else {
            y = E[v];
            if (y < 0 || y === null) {
                y = A.style[v] || 0
            }
            y = parseFloat(y) || 0;
            if (J) {
                y += D + C + I + G + H + F
            }
        }
        return y
    }

    function p(w, v, u) {
        if (w.addEventListener) {
            w.addEventListener(v, u, false)
        } else {
            if (w.attachEvent) {
                w["e" + v + u] = u;
                w[v + u] = function () {
                    w["e" + v + u](i.event)
                };
                w.attachEvent("on" + v, w[v + u])
            }
        }
    }

    function q(w, v, u) {
        if (w.removeEventListener) {
            w.removeEventListener(v, u, false)
        } else {
            if (w.detachEvent) {
                w.detachEvent("on" + v, w[v + u]);
                w[v + u] = null;
                w["e" + v + u] = null
            }
        }
    }

    function f(x, v) {
        var w = jQuery('<div class=lightBox><div class=lightBox-nav><div class="btn-group"> <button class="btn lb-before"><i class="icon-chevron-left"></i> PREVIOUS</button> <button class="btn lb-next">NEXT <i class="icon-chevron-right"></i></button> <button class="btn lb-open"><i class="icon-fullscreen"></i> OPEN</button>  <button class="btn lb-close"><i class="icon-remove"></i> CLOSE</button></div></div> </div>').appendTo("body");
        var A = jQuery("<img src=img/bar.gif class=loading>");
        var y = null;
        var u = 0;
        jQuery(x).on("click", ".box", function () {
            w.fadeIn();
            A.appendTo(w);
            var D = jQuery(this);
            u = jQuery(x).find(".box").index(this);
            var F = D.find("img:first");
            var E = F.attr("src");
            if (E.indexOf("thumbnails") != -1) {
                var B = E.split("thumbnails/");
                E = B[0] + B[1]
            }
            var C = new Image();
            C.src = E;
            C.onload = function () {
                jQuery(C).appendTo(w).css({"max-height":jQuery(this).parent().height() - 60, "max-width":"95%"});
                y = jQuery(C);
                A.remove()
            };
            C.onerror = function () {
                C.src = "img/notFound.png";
                C.onload = function () {
                    jQuery(C).appendTo(w).css({"max-height":jQuery(this).parent().height() - 60, "max-width":"95%"});
                    y = jQuery(C);
                    A.remove()
                }
            }
        });
        jQuery(i).resize(function () {
            if (y != null) {
                y.css({"max-height":y.parent().height() - 60, "max-width":"95%"})
            }
        });
        jQuery("button.lb-close").on("click", function () {
            y = null;
            w.find("img").remove();
            w.fadeOut(300)
        });
        jQuery(o).keyup(function (B) {
            if (B.keyCode == 27) {
                y = null;
                w.find("img").remove();
                w.fadeOut(300)
            }
        });
        jQuery("div.lightBox-nav").on("click", function (B) {
            B.stopPropagation()
        });
        w.on("click", "img", function (B) {
            B.stopPropagation()
        });
        w.on("click", function () {
            y = null;
            w.find("img").remove();
            w.fadeOut(300)
        });
        jQuery("button.lb-next").on("click", function () {
            y = null;
            w.find("img").remove();
            A.appendTo(w);
            var G = jQuery(this);
            var F = jQuery(x).find("div.box");
            u += 1;
            if (u >= F.length) {
                u = 0
            }
            if (!F.eq(u).is(":visible")) {
                var C = u;
                for (var E = 0; E < F.length; E++) {
                    C++;
                    if (C >= F.length) {
                        C = 0
                    }
                    if (F.eq(C).is(":visible")) {
                        u = C;
                        break
                    }
                }
            }
            var I = F.eq(u).find("img:first");
            var H = I.attr("src");
            if (H.indexOf("thumbnails") != -1) {
                var B = H.split("thumbnails/");
                H = B[0] + B[1]
            }
            var D = new Image();
            D.src = H;
            D.onload = function () {
                jQuery(D).appendTo(w).css({"max-height":jQuery(this).parent().height() - 60, "max-width":"95%"});
                y = jQuery(D);
                A.remove()
            };
            D.onerror = function () {
                D.src = "img/notFound.png";
                D.onload = function () {
                    jQuery(D).appendTo(w).css({"max-height":jQuery(this).parent().height() - 60, "max-width":"95%"});
                    y = jQuery(D);
                    A.remove()
                }
            }
        });
        jQuery("button.lb-before").on("click", function () {
            y = null;
            w.find("img").remove();
            A.appendTo(w);
            var G = jQuery(this);
            var F = jQuery(x).find("div.box");
            u -= 1;
            if (u < 0) {
                u = F.length - 1
            }
            if (!F.eq(u).is(":visible")) {
                var C = u;
                for (var E = 0; E < F.length; E++) {
                    C--;
                    if (C < 0) {
                        C = F.length - 1
                    }
                    if (F.eq(C).is(":visible")) {
                        u = C;
                        break
                    }
                }
            }
            var I = F.eq(u).find("img:first");
            var H = I.attr("src");
            if (H.indexOf("thumbnails") != -1) {
                var B = H.split("thumbnails/");
                H = B[0] + B[1]
            }
            var D = new Image();
            D.src = H;
            D.onload = function () {
                jQuery(D).appendTo(w).css({"max-height":jQuery(this).parent().height() - 60, "max-width":"95%"});
                y = jQuery(D);
                A.remove()
            };
            D.onerror = function () {
                D.src = "img/notFound.png";
                D.onload = function () {
                    jQuery(D).appendTo(w).css({"max-height":jQuery(this).parent().height() - 60, "max-width":"95%"});
                    y = jQuery(D);
                    A.remove()
                }
            }
        });
        jQuery("button.lb-open").on("click", function () {
            var B = w.find("img");
            i.open("show.php?image=" + B.attr("src"), "_blank");
            i.focus()
        });
        if (!x) {
            return
        }
        this.element = x;
        this.options = {};
        for (var z in f.defaults) {
            this.options[z] = f.defaults[z]
        }
        for (z in v) {
            this.options[z] = v[z]
        }
        this._create();
        this.build()
    }

    var l = ["position", "height"];
    f.defaults = {isResizable:true, gutterWidth:0, isRTL:false, isFitWidth:false};
    f.prototype = {_getBricks:function (v) {
        var x;
        for (var w = 0, u = v.length; w < u; w++) {
            x = v[w];
            x.style.position = "absolute";
            k(x, "grid-brick");
            this.bricks.push(x)
        }
    }, _create:function () {
        this.reloadItems();
        var x = this.element.style;
        this._originalStyle = {};
        for (var y = 0, v = l.length; y < v; y++) {
            var A = l[y];
            this._originalStyle[A] = x[A] || ""
        }
        this.element.style.position = "relative";
        this.horizontalDirection = this.options.isRTL ? "right" : "left";
        this.offset = {};
        var w = e(this.element), z = this.options.isRTL ? "paddingRight" : "paddingLeft";
        this.offset.y = parseFloat(w.paddingTop) || 0;
        this.offset.x = parseFloat(w[z]) || 0;
        this.isFluid = this.options.columnWidth && typeof this.options.columnWidth === "function";
        var u = this;
        setTimeout(function () {
            k(u.element, "grid")
        });
        if (this.options.isResizable) {
            p(i, "resize", function () {
                u._handleResize()
            })
        }
    }, build:function (u) {
        this._getColumns();
        this._reLayout(u)
    }, _getColumns:function () {
        var u = this.options.isFitWidth ? this.element.parentNode : this.element, v = r(u, "width");
        this.columnWidth = this.isFluid ? this.options.columnWidth(v) : this.options.columnWidth || r(this.bricks[0], "width", true) || v;
        this.columnWidth += this.options.gutterWidth;
        this.cols = Math.floor((v + this.options.gutterWidth) / this.columnWidth);
        this.cols = Math.max(this.cols, 1)
    }, reloadItems:function () {
        this.bricks = [];
        this._getBricks(this.element.children)
    }, _reLayout:function (v) {
        var u = this.cols;
        this.colYs = [];
        while (u--) {
            this.colYs.push(0)
        }
        this.layout(this.bricks, v)
    }, layout:function (H, w) {
        var L, y, v, A, D, I, G;
        for (var J = 0, K = H.length; J < K; J++) {
            L = H[J];
            if (L.nodeType !== 1) {
                continue
            }
            y = Math.ceil(r(L, "width", true) / this.columnWidth);
            y = Math.min(y, this.cols);
            if (y === 1) {
                G = this.colYs
            } else {
                v = this.cols + 1 - y;
                G = [];
                for (I = 0; I < v; I++) {
                    D = this.colYs.slice(I, I + y);
                    G[I] = Math.max.apply(Math, D)
                }
            }
            var E = Math.min.apply(Math, G);
            for (var z = 0, F = G.length; z < F; z++) {
                if (G[z] === E) {
                    break
                }
            }
            L.style.top = (E + this.offset.y) + "px";
            L.style[this.horizontalDirection] = (this.columnWidth * z + this.offset.x) + "px";
            var x = E + r(L, "height", true), u = this.cols + 1 - F;
            for (I = 0; I < u; I++) {
                this.colYs[z + I] = x
            }
        }
        var B = {};
        this.element.style.height = Math.max.apply(Math, this.colYs) + "px";
        if (this.options.isFitWidth) {
            var C = 0;
            J = this.cols;
            while (--J) {
                if (this.colYs[J] !== 0) {
                    break
                }
                C++
            }
            this.element.style.width = ((this.cols - C) * this.columnWidth - this.options.gutterWidth) + "px"
        }
        if (w) {
            w.call(H)
        }
    }, _handleResize:function () {
        var u = this;

        function v() {
            u.resize();
            u._resizeTimeout = null
        }

        if (this._resizeTimeout) {
            clearTimeout(this._resizeTimeout)
        }
        this._resizeTimeout = setTimeout(v, 100)
    }, resize:function () {
        var u = this.cols;
        this._getColumns();
        if (this.isFluid || this.cols !== u) {
            this._reLayout()
        }
    }, reload:function (u) {
        this.reloadItems();
        this.build(u)
    }, appended:function (w, z, C) {
        var v = this, A = function () {
            v._appended(w, C)
        };
        if (z) {
            var B = r(this.element, "height") + "px";
            for (var x = 0, u = w.length; x < u; x++) {
                w[x].style.top = B
            }
            setTimeout(A, 1)
        } else {
            A()
        }
    }, _appended:function (u, v) {
        this._getBricks(u);
        this.layout(u, v)
    }, destroy:function () {
        var x;
        for (var w = 0, u = this.bricks.length; w < u; w++) {
            x = this.bricks[w];
            x.style.position = "";
            x.style.top = "";
            x.style.left = "";
            m(x, "grid-brick")
        }
        var v = this.element.style;
        u = l.length;
        for (w = 0; w < u; w++) {
            var y = l[w];
            v[y] = this._originalStyle[y]
        }
        m(this.element, "grid");
        if (this.resizeHandler) {
            q(i, "resize", this.resizeHandler)
        }
    }};
    f.getWH = r;
    i.Grid = f
})(window);
jQuery(window).ready(function () {
    var b = document.getElementById("container");
    var d = jQuery(".load");
    var g = jQuery('<div style="width:100%;text-align:center;"><img src=img/bar.gif class=loading></div>').appendTo("body");
    var f = 280;
    if (width != undefined) {
        f = width
    }
    var a = new Grid(b, {columnWidth:f, gutterWidth:5, isFitWidth:true});
    jQuery(".filter").find("a").on("click", function (h) {
        h.preventDefault();
        var k = jQuery(this);
        k.parent("li").addClass("active").siblings("li").removeClass("active");
        var j = document.getElementById("container");
        var i = k.data("filter");
        if (i == "all") {
            jQuery(j).find(".box").show()
        } else {
            jQuery(j).find("." + i).show();
            jQuery(j).find(".box").not("." + i).hide()
        }
        a.reload()
    });
    jQuery.get("getImages.php?count=none", function (h) {
        rs = jQuery(h);
        rs.each(function (i) {
            if (jQuery(this).hasClass("box")) {
                jQuery(b).append(jQuery(this).hide())
            } else {
                if (jQuery(this).hasClass("count")) {
                    jQuery("body").append(jQuery(this).hide())
                }
            }
            if (i == rs.length - 1) {
                var j = jQuery(".count");
                if (j.text() == "remove") {
                    d.remove()
                }
            }
        });
        jQuery(b).find("img").load(function () {
            jQuery(this).parent("div.box").show();
            g.remove();
            a.reload();
            d.show()
        })
    });
    var e = jQuery("<img src=img/bar.gif>");
    d.on("click", function (h) {
        h.preventDefault();
        c()
    });
    if (lazyLoad) {
        jQuery(window).scroll(function () {
            if (d.closest("html").length) {
                if (jQuery(window).scrollTop() == (jQuery(document).height() - jQuery(window)[0].innerHeight)) {
                    c()
                }
            }
        })
    }
    var c = function () {
        d.html(e);
        var h = jQuery(".count").remove().text();
        jQuery.get("getImages.php?count=" + h, function (k) {
            rs = jQuery(k);
            rs.each(function (l) {
                if (jQuery(this).hasClass("box")) {
                    jQuery(b).append(jQuery(this).hide())
                } else {
                    if (jQuery(this).hasClass("count")) {
                        jQuery("body").append(jQuery(this).hide())
                    }
                }
                if (l == rs.length - 1) {
                    var m = jQuery(".count");
                    if (m.text() == "remove") {
                        d.remove()
                    }
                }
            });
            var j = true;
            var i = jQuery(".filter").find("li[class=active]").find("a").data("filter");
            if (i != undefined && i != "all") {
                j = false
            }
            jQuery(b).find("img").load(function () {
                bx = jQuery(this).parent("div.box");
                if (j) {
                    bx.show()
                } else {
                    if (bx.hasClass(i)) {
                        bx.show()
                    }
                }
                g.remove();
                a.reload();
                d.html("LOAD MORE IMAGES")
            })
        })
    }
});